
net_maxfilesize 64 // Max out file upload size for extra content
cl_downloadfilter all // Allow all server custom files
//cl_downloadfilter nosounds // Do not download sound files a server
//cl_downloadfilter mapsonly // Only downloads maps from server custom files
//cl_downloadfilter none // Do not download any files from a server
cl_allowdownload 1 // Download other player custom files
//cl_allowdownload 0 // Block downloads of other player custom files
cl_allowupload 1 // Upload your player custom files
//cl_allowupload 0 // Disable uploading your player custom files
cl_localnetworkbackdoor 1 // Network optimizations for local servers
net_usesocketsforloopback 1 // Use network sockets for local servers
sv_parallel_sendsnapshot 1 // Send snapshots to clients in parallel
fps_max 300 
engine_no_focus_sleep 0 // Do not limit FPS when the engine is not focused because
                        // the focus detection can be buggy on some systems or while
                        // streaming and may limit your FPS, without you knowing
r_fastzreject 0 // Renders first pass of a scene with a z-buffer on the CPU and
                // then has the GPU quickly render the scene in a second pass,
                // with the visible parts of the scene already calculated
r_entityclips 1 // Clip entities preferably using clip planes
disp_dynamic 0 // Do not use dynamic meshes for world geometry (displacements)
r_hunkalloclightmaps 0 // Allocate lightmaps in dynamic memory because some are too big for the hunk
r_frustumcullworld 1 // Cull on world draw
r_worldlistcache 1 // Cache some world rendering
mat_clipz 1 // Clips what is drawn for a performance improvement
mat_use_compressed_hdr_textures 1 // Use compressed HDR textures
r_occlusion 1 // Use CPU to have the GPU skip rendering models/props you cannot see
r_occludeemaxarea 101 // Do not skip occlusion of larger objects
r_occluderminarea 2.5 // Use occluders that take up a decent amount of pixels on larger screens
r_occludermincount 2 // Force using at least 2 occluders so we occlude at least something even if they were skipped initially
r_lightcache_zbuffercache 1 // Load z cache data with the map
r_drawopaquestaticpropslast 0 // Use the newer rendering mode if possible
mat_tonemapping_occlusion_use_stencil 0 // Do not use stencil buffer for occlusion queries
host_flush_threshold 0 // Early finish to a Xbox 360 only flush task
r_norefresh 1 // Do not store a useless and unused frame time variable
fast_fogvolume 1 // Use a fast path method to find the visible fog volume
r_pixelfog 1 // Use a pixel shader for fog if possible
mat_bufferprimitives 1 // Buffer primitives
mat_compressedtextures 1 // Allow for compressed textures
mat_managedtextures 1 // Use Direct3D to manage textures, uses a bit more system memory
mat_filterlightmaps 1 // Filter lightmaps
mat_filtertextures 1 // Filter textures
mat_mipmaptextures 1 // Mipmap textures to optimize texture filtering
mat_disable_ps_patch 1 // Force disable runtime manipulation of shaders to fix MSAA on some AMD cards
//mat_disable_ps_patch 0 // Enable patching if necessary when MSAA is enabled
sv_turbophysics 1 // Disable physics interaction
lzma_persistent_buffer 1 // Keep the LZMA compression system in memory to prevent reloads of it
cl_always_flush_models 1 // Remove models from memory every map load to keep memory usage low
mat_levelflush 1 // Clear temporary memory to prevent overloading memory stores
sv_forcepreload 0 // Disable harmful force preload enabled in other configs
filesystem_buffer_size 262144 // Use a 256KB buffer for the filesystem
filesystem_max_stdio_read 64 // Use a higher max read cap (64MB)
filesystem_native 1 // Use native filesystem calls if available
filesystem_unbuffered_io 1 // Allow for unbuffered IO where appropriate since it can be async
mod_load_anims_async 1 // Enable async animation loading
mod_load_mesh_async 1 // Enable async mesh loading
mod_load_vcollide_async 1 // Enable async vcollide loading
mem_max_heapsize_dedicated 128 // Increase memory cap on 512MB systems
r_queued_decals 0 // Disabled by default due to crashes
//r_queued_decals 1 // Offload decal draws to the material system
                    // Beneficial when decal count is above 256 or you have 4 or more CPU cores
r_queued_post_processing 0 // Disabled by default because it usually fails to render the post processing
                           // effects in time for the frame render
r_queued_ropes 1 // Queue some rope rendering using the material system
cl_threaded_client_leaf_system 1 // Asynchronously add new renderables and compute blends for added
                                 // renderables
r_threaded_renderables 1 // Asynchronously set up bones on animated entities
r_threaded_particles 1 // Process particle systems in parallel
r_threaded_client_shadow_manager 1 // Multithreaded shadow computations/rendering
mat_queue_mode 2 // Force multithreaded mode for the material system queue
studio_queue_mode 1 // Use queue calls for studio renders
host_thread_mode 1 // Use the threaded frame behavior if applicable (use 2 to force)
cl_particle_batch_mode 1
r_particle_sim_spike_threshold_ms 0